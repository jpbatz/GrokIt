Project Name: DevGrok
App Name: GrokIt
Will be repo'd on BitBucket (private): 
Will be hosted on: coreos1.devleague.com
Dev URL: https://DevEngine.Telodigrade.com
Deploy URL: https://grok.it

Purpose:
========

"Grok means to understand so thoroughly that the observer becomes a part of the observedâ€”to merge, blend, intermarry, lose identity in group experience."

  Considerations:
    Limited time - study DL terms
    Engage with what we've learned so far (stack)
    Organize scattered materials for future reference
    Future Expansion - accommodate new material
    Passion - educational app
    Reference


Specifications:
===============

Phase I: No Account
 
  [0] General Layout View
        Title
        Header
          Navigation
            Body Content
            Results
        Footer

  [1] (opt) Intro View - go directly to [2] for now
      a) (opt) Login
      b) (opt) Sign-Up (implement later)
      c) (opt) Demo

  [2] Main View: 
      a) list view - list of terms in left panel (on page load)
      b) detailed view - click on term to display details in right panel
      c) Terminology CRUD form
          Add - new auto _id (hidden)
            a) term: text, alpha-num
            b) definition: text-area
            c) mastered: boolean (default=false)
          Edit - _id (hidden)
            a) term: text, alpha-num (no-edit)
            b) definition: text-area
            c) mastered: boolean (reset)
          Delete - confirm, by _id (hidden)
      d) menu options to 
          i)    practice => [3] 
          ii)   (opt) logout
          iii)  (opt) edit profile 
          iv)   (opt) display score history - final scores
                - (opt) date completed
                - (opt) round number
                - (opt) time begin and end per term
                - (opt) calculate total time per round

  [3] Learn View:
      Flashcard style - 
        Subsequent rounds of terms user got "grong" until all terms mastered
        (opt) Tracks and stores stats

        a)  Select given (left panel) implies the guess (right panel): 
              term or definition
        b)  Select term given the definition or Recite definition given term (rubber 
              duckie mode) - selected given displays in left panel, enter guess in right panel
        c)  Score ("gright" and "grong") 
                - gright => mastered = true
                - grong  => practice list for next round
              - current answer visual confirmation (check mark for gright, "x" for 
                  grong)
              - updates scoreboard at bottom
                - display round number and question number / total number of terms
                - computer calculated for guess term, 
                - on your honor for guess definition
        d)  After last term played
              - confirmation and display 
                  - round number and 
                  - final score
              - 100% => graduate! 
                  - all terms updated to "mastered" = true, 
                  - display number of rounds taken to acheive
              - otherwise, option to play next round (not-mastered list of terms)



Phase II: User Accounts

  User accounts stores custom lists and current score, and score history.

    [1] User Account CRUD form
      Add (new)
        a) 
        b) 
        c) 
      Edit
        a) 
        b) 
        c) 
      Delete
        a) 
        b) 
        c) 


Implementation: 
===============

MEH Stack


[M] Data Model - MongoLab data storage, accessed via Mongoose.

  Database: grockit

  Database Collections:

    User Accounts
      _id: auto-generated
      username:
      password:
      practice test gright: [terminology id]
      practice test grong: [terminology id]
      exam_scores: [date and score]

    Terminology
      _id: auto-generated
      term: 
      definition: 
      categories: []
      references: [urls of videos, websites, etc.]
      notes: 
      code sample:
      todo:

    Category
      front-end
      back-end
      full
      language
      library
      framework
      application
      tool
      key-word
      general
      other

[V] View - HTML front end using Jade

  Layouts:

    Hand drawn

[C] Control - JavaScript and ExpresssJS (jQuery?)

    Routes:
      /
      /sign-up
      /login
      /logout
      /user_modify
      /add_term
      /edit_term
      /delete_term
      /view_list
      /view_term
      /learn_mode
      /score_learn
      /exam_mode
      /score_exam
      /history



Future Expansion:
=================

  Mobile and Tablet Considerations (limited details and layout)

  Syntax tutorial/practice for other languages (key words, frequently used constructs)
        JS, Java, Ruby, Python

  Games
    wordfind (key words)
    word invader
    matching
    etc.

  Diagram
    expandable/contractable (see comprend.io)

  Procedures
    - how to set up ...
        gulp
        node
        npm
        docker
        MEH
        MEAN
        etc.

  Code Snipets Reference and Practice